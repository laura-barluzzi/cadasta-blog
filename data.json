{
  "content": [
    {
      "date": "2017-05-12",
      "summary": "I started to self-learn back in July 2016. During the first five months (July-Nov), I used to follow the great MIT course [“Introduction to Computer Science and Programming”](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/). Alongside, I used to read the book [“Learn Python the Hard Way”](https://learnpythonthehardway.org/book/) by *Zed A. Shaw*. Shaw’s book is practical and has about 50 exercises: in the last one you create a simple web-game.\nAfter concluding both the book and the course, I decided to explore different ‘must-do’ languages. In November 2016 I joined the Free Code Camp community to learn basics about Javascript, HTML, CSS and web-development. At the end of January 2017 I obtained their [Front End Certification](https://www.freecodecamp.com/laura-barluzzi/front-end-certification). I highly recommend their front-end exercises and tutorials, I learnt a lot from them!\n In late February 2017, while starting a voting application as part of the back-end exercises, I received a notification from the **Freecodecamp Vancouver Facebook group**: someone posted about a job opening for the Outreachy summer internship program. Was I eligible? Yes. Was it doable for my level? Maybe. After a bit of thinking, I decided to give it a try. For the entire month of March I learned how to use Git and I contributed on the [cadasta-platform](https://github.com/Cadasta/cadasta-platform) by fixing some issues. Understanding code written by other people and spread-out in hundreds of documents was not an easy task. I couldn’t have make it without the help of other developers who answered my questions...\n...my hard-work and self-directive research paid off though – the Cadasta team chose me as their Outreachy 2017 summer intern! Keep up the hard work!",
      "title": "My self-learning path to sofware development",
      "topics": ["Self-learning", "Outreachy"],
      "type": "Post",
      "url": ""
    },
    {
      "date": "2017-05-16",
      "summary": "I grew up in a small Alpine Italian city called Belluno. Since I was a teenager, I started volunteering at a local fairtrade shop and I became ‘famous’ among my peers for my dedication to social causes. Although I was studying accounting and programming (I know, funny), my interests in human rights and global justice brought me to pursue international development studies. For about 10 years, *my dream was to work for NGOs*, co-operatives and enterprises that promote social justice.\nIn November 2015 I obtained my Master and the job hunting phase in international development began. Over a period of 7-8 months I applied to a couple of hundreds of openings all over the world. I’d say I wrote *thousands* of lines in motivation letters and many pre-structured application forms. However, I received *only one answer: _a rejection_*. What a bummer! In Vancouver at least I obtained an opportunity at the _British Columbia Council for International Development (BCCIC)_. Although the internship went great, their budget and hands were tied so they had to let me go.\nIt was in July 2016 that I realized two things: (1) I was *not really specialized* in anything; and (2) A *safe paid career was not going to happen* in international development. With a sour taste in my mouth, I convinced myself to purse a *plan B*. But was this a defeat? I actually then realized that defeat would have been to keep going based on a [sunk cost fallacy](https://youarenotsosmart.com/2011/03/25/the-sunk-cost-fallacy/).\nAs a consequnce, for 9-months I have been self-learning programming, and today I’m about to start an internship as a software developer at Cadasta. Cadasta enables people in developing countries to better protect and manage their land rights -- ironically, my plan B is enabling my plan A... life is funny, isn't it?",
      "title": "Changing career empowered me",
      "topics": ["Career"],
      "type": "Post",
      "url": ""
    },   
    {
      "date": "2017-06-16",
      "summary": "My first weeks as an Outreachy intern at [Cadasta](https://github.com/Cadasta) have been incredible. As agreed with my mentors Chandra and Kate, my starting task was to enhance the user experience by adding the **language option in the user account**. The result of this work in available on [this PR](https://github.com/Cadasta/cadasta-platform/pull/1569) on Github. As you can see, Cadasta uses Python with Django.\nTo achieve the goal, on my first day I made a detailed task-list, which you can see on the PR description section. Fortunately, thanks to the fact I have already contributed during the application process, the setting up of the environment and the Git Flow were already known to me. This meant I could quickly start with the tasks. I’m going to write the next paragraphs highlighting **challenges** and **moments of pride** for each chunk of work:\n\n###### **1. Handling a migration**\n\n**Challenges:**\nIt was the first time I worked with migrations and I didn’t have a clear idea of what it required to do. Following some online tutorials, I just learned how to run commands such as `python manage.py makemigrations` and `python manage.py migrate`. At first I believed this was *all*. Though I encountered a problem and an unclear error appeared -- I was unable to figure it out on my own. After asking for help, I was told the error was linked probably to the version of Python (2.X instead of 3.X). After fixing this problem, later on I also discovered I had to add, commit and push a migration file to Git Hub in order to add the model change to the PR -- another information I didn’t know and I needed help from someone else in order to figure out.\n\n**Moments of pride:**\nI didn’t have one to be honest. But in retrospect I acknowledge the importance of asking for help with detailed information and at the right time. I was unblocked very quickly with the help from other people.\n\n###### **2. Activating translation of language stored in the user model:**\n\n**Challenges:**\nOne of the biggest challenges I faced was to find detailed information (and understand) the Django documentation over topics such as **Internationalization** and writing **custom middlewares**. Some specific questions on how to activate the language stored in the `user.language` field were not available (or very hard to find) neither in StackOverflow and other websites. Further, the [Django page on custom middlewares](https://docs.djangoproject.com/en/1.11/topics/http/middleware/) was missing key information such as the fact that middlewares should `return None` if not a response.\n\n**Moments of pride:**\nI was delighted when I saw it working at the end: in this tough process I learned a lot and I built for the first time a middleware and a test using the Python unittest module [Mock](https://docs.python.org/3/library/unittest.mock-examples.html).\n\n###### **3. Adding feature to the API**\n\n**Challenges:**\nAgain the main major block of this task was the lack of detailed cases in the [Cadasta API Documentation](https://cadasta.github.io/api-docs/). One of the reviewers of my PR required this addition by just mentioning it, and unfortunately my mentors were not able to guide me and quickly address my questions on **how to start** with this. For an entire day I was blocked and I could not understand where to find *detailed* information. However, on my second day somebody from the dev team helped me a lot and I could finally figure out everything.\n\n**Moments of pride:**\nFirstly, I used my experience to improve the existing documentation: I wrote a mock up with **curl command examples** for each section and I shared this document with people in charge of the documentation upgrade -- my initiative was highly appreciated! Secondly, I was proud of myself since I learned a lot: although I needed the initial help to start, I then figured out everything on my own by reading existing code and pages on the [Django Rest Framework](http://www.django-rest-framework.org/).\n\n**Summary**\n\nMy start at Cadasta was incredible since I felt a lot the ownership for my work. Facing challenges such as learning new frameworks or understanding the documentation have ultimately been positive experiences -- this makes me feel more and more like a developer.I guess this is the **magic** of coding at the end of the day:\n\n> **There’ll be always challenges, therefore there’ll be always gratifications and chances to learn.**\n\n-- my own words :)\n\n\n\n[Cadasta git hub repository](https://github.com/Cadasta/cadasta-platform)\n\n[My first PR](https://github.com/Cadasta/cadasta-platform/pull/1569)\n\n[My koalacoder website](http://koalacoder.com/)\n\n[My blog](http://koalacoder.com/cadasta-blog/)",
      "title": "My first weeks as an intern at Cadasta",
      "topics": ["Outreachy", "Cadasta", "Work"],
      "type": "Post",
      "url": ""
    },   
    {
      "date": "2017-06-30",
      "summary": "During my first 2 weeks I added the option for Cadasta platform’s users to select a preferred language to be applied in the platform once the user is logged in. I had to:\n\n\n**1. Add a user.language field into the User model in Django**\n\n**2. Add the dropdown field to the form displayed into the template to edit the user profile**\n\n**3. Activate the translation of user.language whenever the user logs in and edits the profile.**\n\n\nWhile the first two steps were extremely easy to be done thanks to the [Django models](https://docs.djangoproject.com/en/1.11/topics/db/models/) and [form models](https://docs.djangoproject.com/en/1.11/topics/forms/modelforms/), the third task was surprisingly not available.\n\nI ended up conducting a lot of research on how to activate the translation with the language stored in the user model in Django. Keeping in mind that all the in-text formatting for translation was already covered as explained [here](https://docs.djangoproject.com/en/1.11/topics/i18n/translation/), I could not find anything covering my case scenario to _activate_ the translation. The only option I found that was somehow relevant was the case of [set_language()](https://docs.djangoproject.com/en/1.11/topics/i18n/translation/#set-language-redirect-view): this does exactly what I wanted but it ended up working only from a template form in the frontend. I was looking for a backend solution instead.\n\nAt one point I realized that Django didn’t provide what I was looking for. At the same time, I also noticed that many people on the internet were asking my same exact question on platforms such as stackoverflow. It was at that moment that I realized I had to patch different informations together to create my own _custom_ solution. \n\n\n**How I ended up thinking about a custom middleware?**\n\nI wanted to write the code to activate the language in one single place, to reduce redundancy. In order to do so, the best option would have been to activate the translation **whenever there was a request**. This brought me to think about adding a middleware. But what is a middleware? According to [Wikipedia](https://en.wikipedia.org/wiki/Middleware):\n\n>Middleware is computer software that provides services to software applications beyond those available from the operating system. It can be described as \"software glue.\"\n\nUsing Vitor Freitas words:\n\n>a Middleware is a regular Python class that hooks into Django’s request/response lifecycle.\n\nYou can visualize a middleware like this:\n\n```\nUser → request → middleware → Cadasta Django application\nUser ← response ← middleware ← Cadasta Django application\n```\n\nSince there wasn’t already one, I had to built a _custom middlware_. Django provides some instructions on how to create [Django custom middlewares](https://docs.djangoproject.com/en/1.11/topics/http/middleware/). However, these information were highly misleading since in their main example they don’t clearly mention that if you don’t return a **response** you should return **None**. Further, they didn’t clearly advise on where to locate the middleware in the code.\n\nWith the help of some examples such as this answer on  [StackOverflow](https://stackoverflow.com/questions/18322262/how-to-setup-custom-middleware-in-django) and this [How to Create a Custom Django Middleware](https://simpleisbetterthancomplex.com/tutorial/2016/07/18/how-to-create-a-custom-django-middleware.html) tutorial, I combined information and I sucessfully built my custom middleware.\n\n\n**The path of my middleware**\n\nSince my custom middleware only handled the user model to fetch the user.language value, I decided to locate my middleware class inside a **middleware.py** in the main repository of the **accounts** application, which is the Cadasta application handling the user models.\n\nFurther, I had to add the path of my **middlware.py** file into the MIDDLEWARE_CLASSES list in **settings/default.py**: \n\n```\nMIDDLEWARE_CLASSES = (\n    'corsheaders.middleware.CorsMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    # …\n    'accounts.middleware.UserLanguageMiddleware',\n)\n```\n\n**The UserLanguageMiddleware class:**\n\n```\nfrom django.utils import translation\n\nclass UserLanguageMiddleware(object):\n    def process_request(self, request):\n        if not request.user.is_authenticated:\n            return None\n\n        user_language = request.user.language\n        current_language = translation.get_language()\n        if user_language == current_language:\n            return None\n\n        translation.activate(user_language)\n        request.session[translation.LANGUAGE_SESSION_KEY] = user_language\n        return None\n```\n\nThis class is going to be **called at any request**.  It processes the request by accessing the user.language value and by activating the translation of the entire platform whenever the user is authenticated. Further, this code sets the LANGUAGE_SESSION_KEY to the same value as well.\n\n\n**Conclusion**\n\nThis solution of the middleware worked very smoothly and required the addition of just 1 file (with respective test available [here](https://github.com/Cadasta/cadasta-platform/blob/9d03c296cde9148e98f8552aa5ac003bf81df318/cadasta/accounts/tests/test_middleware.py)). On this day, this code has been merged into the [master branch](https://github.com/Cadasta/cadasta-platform/blob/9d03c296cde9148e98f8552aa5ac003bf81df318/cadasta/accounts/middleware.py) of cadasta-platform and I am considering to enable everybody to use my solution by creating an independent package soon.\n\n\n[Cadasta git hub repository](https://github.com/Cadasta/cadasta-platform)\n\n[My first PR](https://github.com/Cadasta/cadasta-platform/pull/1569)\n\n[My koalacoder website](http://koalacoder.com/)\n\n[My blog](http://koalacoder.com/cadasta-blog/)",
      "title": "A Django custom middleware story",
      "topics": ["Outreachy", "Cadasta", "Work"],
      "type": "Post",
      "url": ""
    },   
    {
      "date": "2017-07-14",
      "summary": "In the past 2 weeks I worked on adding a feature that enables users of the [Cadasta platform](https://platform.cadasta.org/account/login/) to upload a profile picture. Although my solution to use the free open-source library [cropit](https://github.com/scottcheng/cropit) didn't end up being used due to specific Cadasta's restrictions, I want to share what I learnt about **the cropit library -- an easy way to upload, preview, crop and manipulate pictures.**\n> Look at [the GitHub repository](https://github.com/scottcheng/cropit) and at some [cropit demos here](http://scottcheng.github.io/cropit/)\n\n##### **Installation**\nIn order to use this library, you can simply add a **script tag** in the HTML template where you plan to add the image input:\n``` HTML\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/cropit/0.5.1/jquery.cropit.min.js\"></script>\n```\n##### **Basic HTML** ([source](https://github.com/Cadasta/cadasta-platform/blob/e2c999a9368eaedb42a17f13e62dd0ade0ec2293/cadasta/templates/accounts/profile.html#L23-L51))\nCropit provides a HTML block that enables you to **preview** the uploaded image. Hereafter you see my slightly modified version that force the preview of `user.avatar.url` whenever the page is loaded. In this way, a user always see **the preview of their existing user avatar picture by default**.\n``` HTML\n<div class=\"cropit-preview-wrapper\">\n    <div class=\"cropit-preview\">\n      <img src={{user.avatar.url}} id=\"user-avatar\"/>\n    </div>\n    <div id=\"image-buttons\">\n      <div id=\"flex-column\">\n        <button type=\"button\" class=\"btn btn-primary btn-sm\" title=\"Remove account picture\" id=\"delete\">\n          <span class=\"glyphicon glyphicon-remove\"></span>\n        </button>\n        <button type=\"button\" class =\"btn btn-primary btn-sm\" title=\"Reset your current picture\" id=\"undo\">\n          <span class=\"glyphicon glyphicon-refresh\"></span>\n        </button>\n      </div>\n    </div>\n</div>\n```\nI also added the 2 buttons so that users could:\n***1. remove an existing avatar*** (and displaying a default avatar picture);\n***2. undo current changes and preview again the existing user profile picture.***\nCropit provides the option to crop the image by zooming in and out thanks to the `input type=range` as the next HTML block shows:\n``` HTML\n<div class=\"slider-wrapper hidden\" id=\"zoom\">\n    <span class=\"glyphicon glyphicon-picture\"></span>\n    <input type=\"range\" class=\"cropit-image-zoom-input\" id=\"zoom-range\">\n    <span class=\"glyphicon glyphicon-picture large\"></span>\n</div>\n```\nLast but not least, cropit works on top of **2 input tags**:\n***1. a visible one for uploading an image:***\n``` HTML\n<input type=\"file\" class=\"cropit-image-input\" id=\"upload\" accept=\".jpg,.gif,.png\">\n```\n***2. a hidden one where to store the _base64_ of the cropped uploaded image:***\n``` HTML\n<input type=\"hidden\" name=\"base64\" id=\"hidden-image-data\" />\n```\n##### **Javascript** ([source](https://github.com/Cadasta/cadasta-platform/blob/e2c999a9368eaedb42a17f13e62dd0ade0ec2293/cadasta/core/static/js/image-upload.js))\nThe glue enabling the magic to happen is the javascript that you run with such template. The first thing **you cannot forget** is to enable cropit to extract the base64 once the submit button of the form is clicked. Without this, the cropping will not happen.\n``` Javascript\n$('form').submit(function() {\n    var croppedImageBase64 = $('#image-editor').cropit('export');\n    $('#hidden-image-data').val(croppedImageBase64);\n}); \n```\nOn top of this, there are also many sweet functionalities that cropit provides (full list available at the end of [this page](http://scottcheng.github.io/cropit/), under **Documentation**). In my `image-upload.js` file I used these options in particular:\n``` Javascript\n$('#image-editor').cropit({\n    // whenver the input file change fire this function\n    onFileChange: function() {\n        avatarChanged = true;\n        $(\"#user-avatar\").hide();\n    },\n    onZoomDisabled: function() {\n        // hide zoom input range whenever doesn't work\n        $(\"#zoom\").addClass(\"hidden\");\n    },\n    onZoomEnabled: function() {\n        // show zoom input range whenever it works\n        $(\"#zoom\").removeClass(\"hidden\");\n    },\n   // if image smaller than preview box, stretch it and fill box\n   smallImage: 'stretch',\n });\n```\n##### **Some screenshots**\n**1. Preview of default avatar in case the user didn't upload any image.**\n![](https://user-images.githubusercontent.com/16849118/28040907-46e52ed0-657c-11e7-97d4-1379aeff15ef.png)\n\n**2. Preview of already cropped and saved image (so not zoom available)**\n![](https://user-images.githubusercontent.com/16849118/28041210-62420c2e-657d-11e7-9752-4a2a76ddbdcd.png)\n\n**3. Preview of an image uploaded and ready to be moved and cropped (so zoom range available)**\n![](https://user-images.githubusercontent.com/16849118/28041345-eb85e118-657d-11e7-8344-45deac44c304.png)\n\n##### **Conclusion**\nI really enjoyed working with this library. I advice everyone to use cropit in case you want to provide a good user experience while also enabling you to personalize and customize the design. Another reason why this library is better than many others is due to the fact that it **already provides the base64 of the cropped image**. Other libraries tend to return the coordinates of the cropped section instead, forcing you to crop the image on the server side later on.",
      "title": "Image manipulation with Cropit",
      "topics": ["Outreachy", "Cadasta", "Work"],
      "type": "Post",
      "url": ""
    }
  ],
  
  "styling": {
    "navbarColor": "red lighten-2",
    "backgroundColor": "blue-grey"
  },
  
  "meta": {
    "title": "my coding blog",
    "about": {
      "avatar": "",
      "blurb": "##### Hello World! Welcome to my coding blog!\nI'm a fuzzy   [***koala coder***](http://koalacoder.com) and here I write about my experience as an [Outreachy](https://www.gnome.org/outreachy/) intern at [Cadasta](http://cadasta.org).\nAfter studying politics and international developement, I decided to self-learn programming and I'm excited to share *challenges*, *joys* and *lessons learnt* along the way.\nMy posts highlight the reality of studying and working on **open source, remote and tech-for-good projects.**"
    }
  }
}
